#配置网关后，网关和原始路径都可以访问哦~~
#如果一个服务是集群的话，会自动负载均衡
#这个服务的其他代码都是解决跨域的固定代码，不需要自己写 所以controller可以不用再写crossorigin了~
# 服务端口
server.port=8222
# 服务名
spring.application.name=service-gateway
# nacos服务地址
spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848

#使用服务发现路由，gateway此时会通过服务发现找到其他服务
spring.cloud.gateway.discovery.locator.enabled=true
#多个路由匹配的写法
#设置路由id               理论可以随便写，建议写服务名字
spring.cloud.gateway.routes[0].id=service-acl
#设置路由的uri   lb://nacos注册服务名称  固定写法 lb://
spring.cloud.gateway.routes[0].uri=lb://service-acl
#设置路由断言,代理servicerId为auth-service的/auth/路径  跟nginx挺像的
spring.cloud.gateway.routes[0].predicates= Path=/*/acl/**

#配置service-edu服务
spring.cloud.gateway.routes[1].id=service-edu
spring.cloud.gateway.routes[1].uri=lb://service-edu
spring.cloud.gateway.routes[1].predicates= Path=/eduservice/**

#配置service-edu服务
spring.cloud.gateway.routes[2].id=service-msm
spring.cloud.gateway.routes[2].uri=lb://service-msm
spring.cloud.gateway.routes[2].predicates= Path=/edumsm/**

